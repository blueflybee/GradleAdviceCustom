apply plugin: 'com.android.application'
apply from: "$rootDir/sysbuild/version.gradle"

/////////////////////////////////////////////////////////////////////////////////
def synchronized getVersionProperty(key, defValue) {
    def file = file("$rootDir/sysbuild/version.properties")
    if (file == null || !file.exists() || !file.canRead()) return defValue
    def inputStream = new FileInputStream(file)
    def properties = new Properties()
    properties.load(inputStream)
    return properties[key]
}

def getAppVersionNameFromFile() {
    return getVersionProperty('VERSION_NAME', '0.0.0')
}
def getAppVersionCodeFromFile() {
    return getVersionProperty('VERSION_CODE', 0) as Integer
}

def appVersionNameFile = getAppVersionNameFromFile()
def appVersionCodeFile = getAppVersionCodeFromFile()

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.yjcloud.gradleadvicecustom"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode appVersionCodeFile
        versionName appVersionNameFile
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'mode'
    productFlavors {

        dev {
            dimension 'mode'
        }
        prod {
            dimension 'mode'
        }
    }

    applicationVariants.all { variant ->
//        println "variant.baseName = $variant.baseName"
//        println "variant.name = $variant.name"
//        println "variant.buildType.name = $variant.buildType.name"
//        println "variant.productFlavors.name = ${variant.productFlavors.get(0).name}"
//        println "variant.description = $variant.description"
//        println "variant.flavorName = $variant.flavorName"
//        println "variant.dirName = $variant.dirName"
//        println "-------------------------------------"

        variant.outputs.all { output ->
//            println "output.name = $output.name"
//            println "output.outputFile.name = $output.outputFile.name"
            outputFileName = project.name + "-" + variant.name + "-v" + appVersionNameFile + "_$appVersionCodeFile" + "-" + buildTime() + ".apk"
            println "outputFileName = $outputFileName"


        }

    }
}

def buildTime() {
    return new Date().format('yyyyMMdd')
}

task printVersion() {
    doLast {
        println "versionCode = $appVersionCode"
        println "versionName = $appVersionName"
    }
}

//从git动态获取tag名称作为版本名称的组成部分
def getAppVersionName() {
    def stdout = new ByteArrayOutputStream()
    exec {
//        commandLine 'git', 'describe', '--abbrev=0', '--tags'
        commandLine 'git', 'tag', '--list'
        standardOutput stdout
    }
    def tags = stdout.toString().split("\n")
    return tags[tags.size() - 1]

}
//从git动态获取tag数量作为AppVersionCode
def getAppVersionCode() {
    def stdout = new ByteArrayOutputStream()
    exec {
//        commandLine 'git', 'describe', '--abbrev=0', '--tags'
        commandLine 'git', 'tag', '--list'
        standardOutput stdout
    }
    return stdout.toString().split("\n").size()
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
